1. Can we change the data directly from database?
2. How to embed generated views to our own HTML files?
3. Is it possible to run https
4. run different database in differnt development enviroment. 
5. how to embed generated views to user's html files?
6. when to run rake db:migrate
7. resources :XXX   <-> CRUD
	
  after you configure resources :xxx at routes file, you can do
  "rake routes" at project folder to see allthe REST routes
  But there is still NO controller to show views for its routes


	          Prefix Verb   URI Pattern                Controller#Action
  welcome_index GET    /welcome/index(.:format)   welcome#index
welcome_contact GET    /welcome/contact(.:format) welcome#contact
           root GET    /                          welcome#index
          posts GET    /posts(.:format)           posts#index
                POST   /posts(.:format)           posts#create
       new_post GET    /posts/new(.:format)       posts#new
      edit_post GET    /posts/:id/edit(.:format)  posts#edit
           post GET    /posts/:id(.:format)       posts#show
                PATCH  /posts/:id(.:format)       posts#update
                PUT    /posts/:id(.:format)       posts#update
                DELETE /posts/:id(.:format)       posts#destroy
9. HTML request methods
  http://www.w3schools.com/tags/ref_httpmethods.asp

10. Modes in RoR use a singular name, and their correspongding db tables use a plural name

  $ rails g model Post filed1:type filed2:type
  This will create a post model under /app/model/post.rb
  and a datebase creation file under /db/migrate

  But at this time, you HAVE NOT create a table YET! you need to run rake command to do this. 

  $ rake db:migrate


11. This will reset your database and reload your current schema with all.
      rake db:reset
      rake db:migrate

    This will destroy your db and then create it and then migrate your current schema.
        rake db:drop
        rake db:create
        rake db:migrate
12. render VS redirect_to
    render is done within the same request as the form submissoion
    redirect_to will tell the browser to issue another request

13. 
  $ rails d model name 

  This just deletes the model and not the migration you have run (which created the table in the database).

  If you want to delete both the model and the tables, you will have to do the following

  $rake db:rollback 
  $rake d model name

14. rails 4.0 you dont have to add index mannual, its automatically added when you create your model

15. $ bundle install --without production

    group :production do
      gem 'pg', '0.15.1'
      gem 'rails_12factor', '0.0.2'
    end

    The --without production option prevents the local installation of any production gems, which in this case consists of pg and rails_12factor. (If Bundler complains about a readline error, try adding gem 'rb-read\-line', '~> 0.4.2' to your Gemfile.) Because the only gems we’ve added are restricted to a production environment, right now this command doesn’t actually install any additional local gems, but it’s needed to update Gemfile.lock with the pg and rails_12factor gems and the specific Ruby version. We can commit the resulting change as follows:

    $ git commit -a -m "Update Gemfile.lock for Heroku"


16. heruko ruby on rails: push rejected no cedar supported app detected

    It seems that the old .git information has some bad effect on deploying

    So

    here is the solution:

    rm -rf .git
    git init
    git add .
    git commit -am "Reinitialize"
    heroku apps:create yourAppsName --stack cedar
    git push heroku master

    NOTES:
      1. It might require you to reconfig git remote for github
      2. heroku rename ..
      3. ('a'..'z').to_a.shuffle[0..7].join

17. $ rails generate scaffold User name:string email:string
  
    scaffold will create 7 method is "users" controller
    It will also create name and email for User Model
    It will also create 5 views under users view folder

18. Variables that start with the @ sign, called instance variables, are automatically available in the view

19. $ rails new sample_app --skip-test-unit
  Here the --skip-test-unit option to the rails command tells Rails not to generate a test directory associated with the default Test::Unit framework. This is not because we won’t be writing tests; on the contrary, starting in Section 3.2 we will be using an alternate testing framework called RSpec to write a thorough test suite.


20 one gemgile examples:
    source 'https://rubygems.org'
    ruby '2.0.0'
    #ruby-gemset=railstutorial_rails_4_0

    gem 'rails', '4.0.1'
    gem 'bootstrap-sass', '2.3.2.0'
    gem 'bcrypt-ruby', '3.1.2'
    gem 'faker', '1.1.2'
    gem 'will_paginate', '3.0.4'
    gem 'bootstrap-will_paginate', '0.0.9'

    group :development, :test do
      gem 'sqlite3', '1.3.8'
      gem 'rspec-rails', '2.13.1'
      # The following optional lines are part of the advanced setup.
      # gem 'guard-rspec', '2.5.0'
      # gem 'spork-rails', '4.0.0'
      # gem 'guard-spork', '1.5.0'
      # gem 'childprocess', '0.3.6'
    end

    group :test do
      gem 'selenium-webdriver', '2.35.1'
      gem 'capybara', '2.1.0'
      gem 'factory_girl_rails', '4.2.0'
      gem 'cucumber-rails', '1.4.0', :require => false
      gem 'database_cleaner', github: 'bmabey/database_cleaner'

      # Uncomment this line on OS X.
      # gem 'growl', '1.0.3'

      # Uncomment these lines on Linux.
      # gem 'libnotify', '0.8.0'

      # Uncomment these lines on Windows.
      # gem 'rb-notifu', '0.0.4'
      # gem 'win32console', '1.3.2'
      # gem 'wdm', '0.1.0'
    end

    gem 'sass-rails', '4.0.1'
    gem 'uglifier', '2.1.1'
    gem 'coffee-rails', '4.0.1'
    gem 'jquery-rails', '3.0.4'
    gem 'turbolinks', '1.1.1'
    gem 'jbuilder', '1.0.2'

    group :doc do
      gem 'sdoc', '0.3.20', require: false
    end

    group :production do
      gem 'pg', '0.15.1'
      gem 'rails_12factor', '0.0.2'
    end

    Then run:
    $ bundle install --without production
    $ bundle update
    $ bundle install


21. 

******************************************************
Models
******************************************************
1. naming convention
    Model Class - Singular with the first letter of each word capitalized (e.g., BookClub)
    Database Table - Plural with underscores separating words (e.g., book_clubs)
2. shema conventions
    Foreign key
      singularized_table_name_id (e.g., item_id, order_id). 
    primary key
       By default, Active Record will use an integer column named id as the table's primary key. When using Rails Migrations to create your tables, this column will be automatically created.





Notes
1. git log -3

